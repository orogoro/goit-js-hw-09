{"version":3,"sources":["js/03-promises.js"],"names":["refs","delayEl","document","querySelector","stepEl","amountEl","buttonEl","inputValue","main","value","console","log","addEventListener","position","createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","firstDelay","step","amount","i","then","catch"],"mappings":";AAAA,MAAMA,EAAO,CACXC,QAASC,SAASC,cAAc,uBAChCC,OAAQF,SAASC,cAAc,sBAC/BE,SAAUH,SAASC,cAAc,wBACjCG,SAAUJ,SAASC,cAAc,0BAInC,SAASI,IACPC,EAAKR,EAAKC,QAAQQ,MAAOT,EAAKI,OAAOK,MAAOT,EAAKK,SAASI,OAC1DC,QAAQC,IAAIX,EAAKC,QAAQQ,OAJ3BT,EAAKM,SAASM,iBAAiB,QAASL,GAWxC,IAAIM,EAAW,EAEf,SAASC,EAAcD,EAAUE,GACxB,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EACFF,EAAQ,CAAEJ,SAAAA,EAAUE,MAAAA,IAEpBG,EAAO,CAAEL,SAAAA,EAAUE,MAAAA,KAEpBA,KAIP,SAASP,EAAKe,EAAYC,EAAMC,GACzB,IAAA,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAEnCZ,EAAcY,EADAH,EAAaC,GAAQE,EAAI,IAEpCC,KAAK,EAAGd,SAAAA,EAAUE,MAAAA,MACjBL,QAAQC,2BAA2BE,QAAeE,SAEnDa,MAAM,EAAGf,SAAAA,EAAUE,MAAAA,MAClBL,QAAQC,0BAA0BE,QAAeE","file":"03-promises.feb0175f.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n  buttonEl: document.querySelector('button[type=\"submit\"]'),\n};\nrefs.buttonEl.addEventListener('click', inputValue);\n\nfunction inputValue() {\n  main(refs.delayEl.value, refs.stepEl.value, refs.amountEl.value);\n  console.log(refs.delayEl.value);\n}\n\n// let step = 500;\n// const amount = 5;\n// const firstDelay = 1000;\n\nlet position = 0;\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction main(firstDelay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    const delay = firstDelay + step * (i - 1);\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"]}